input {
  beats {
    port => {{ LOGSTASH_PORT }}
    type => beats
    congestion_threshold => 40
  }
}

filter {
  multiline {
    pattern => "(^(?![0-9]|[A-Z][a-z][a-z]\s|Traceback|\[[0-9]|date)|^([0-9][0-9]\s))"
    what => "previous"
    stream_identity => "%{source}"
  }
  if !([message] =~ /^(Traceback)/ ) {
  if ("/edx/var/log/nginx/kibana.access.log" in [source]) {
    grok {
      match => { "message" => "%{IP:ip_addr} \- \- \[%{MONTHDAY}\/%{MONTH}\/%{YEAR}\:%{HOUR}\:%{MINUTE}\:%{SECOND} %{ISO8601_TIMEZONE}\] %{QUOTEDSTRING:nginx_request} %{INT:nginx_status_code} %{INT:nginx_payload_size} %{QUOTEDSTRING:nginx_external_url}%{GREEDYDATA:nginx_user_agent}" }
    }
  } else if ("/edx/app/edxapp/edx-platform/logs/app1/nginx/carnegie_access.log" in [source] or
    "/edx/app/edxapp/edx-platform/logs/app1/nginx/cms_access.log" in [source] or
    "/edx/app/edxapp/edx-platform/logs/app1/nginx/convenience_access.log" in [source] or
    "/edx/app/edxapp/edx-platform/logs/app1/nginx/lms_access.log" in [source] or
    "/edx/app/edxapp/edx-platform/logs/app1/nginx/verfy_access.log" in [source]) {
    grok {
      match => { "message" => "%{IP:ip_addr} \- \- \[%{MONTHDAY}\/%{MONTH}\/%{YEAR}\:%{HOUR}:?%{MINUTE}\:%{SECOND} %{ISO8601_TIMEZONE}\] %{QUOTEDSTRING:nginx_request} %{INT:nginx_status_code} %{INT:nginx_payload_size} \"\-\" %{QUOTEDSTRING:nginx_external_url}" }
    }
  } else if ("/edx/app/edxapp/edx-platform/logs/app1/nginx/access.log" in [source] or 
    "/edx/app/edxapp/edx-platform/logs/app1/nginx/access-verify.log" in [source]) {
    grok {
      match => { "message" => "\- \- %{IP:ip_addr} \- \- \[%{MONTHDAY}\/%{MONTH}\/%{YEAR}\:%{HOUR}:?%{MINUTE}\:%{SECOND} %{ISO8601_TIMEZONE}\] ? %{QUOTEDSTRING:nginx_request} %{INT:nginx_status_code} %{INT:nginx_payload_size} %{DATA:nginx_payload_size} \"\-\" %{QUOTEDSTRING:nginx_external_url}" }
    }
  } else if ("/edx/app/edxapp/edx-platform/logs/app1/nginx/carnegie_error.log" in [source] or
    "/edx/app/edxapp/edx-platform/logs/app1/nginx/cms_error.log" in [source] or
    "/edx/app/edxapp/edx-platform/logs/app1/nginx/convenience_error.log" in [source] or
    "/edx/app/edxapp/edx-platform/logs/app1/nginx/error.log" in [source] or
    "/edx/app/edxapp/edx-platform/logs/app1/nginx/error-verify.log" in [source] or
    "/edx/app/edxapp/edx-platform/logs/app1/nginx/lms_error.log" in [source] or
    "/edx/app/edxapp/edx-platform/logs/app1/nginx/verify_error.log" in [source]) {
    grok {
      match => { "message" => "%{YEAR}/%{MONTHNUM}/%{MONTHDAY} %{HOUR}\:%{MINUTE}\:%{SECOND} \[%{WORD:log_level}\] %{GREEDYDATA:syslog_message}" }
    }
  } else if ("{{ COMMON_LOG_DIR }}/cms/edx.log" in [source] or 
    "{{ COMMON_LOG_DIR }}/lms/edx.log" in [source] or 
    "{{ COMMON_LOG_DIR }}/notifier/edx.log" in [source] or 
    "/edx/app/edxapp/edx-platform/logs/util1/xqueue/edx.log" in [source] or 
    "/edx/app/edxapp/edx-platform/logs/util1/notifier/edx.log" in [source] or
    "/edx/app/edxapp/edx-platform/logs/util1/certs/edx.log" in [source] or
    "/edx/app/edxapp/edx-platform/logs/app1/lms/edx.log" in [source] or
    "/edx/app/edxapp/edx-platform/logs/app1/cms/edx.log" in [source]) {
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{WORD:syslog_hostname} \[%{WORD}\=%{DATA:service_variant}\]\[%{DATA:service_program}\]\[%{WORD}\:%{USERNAME:env}\] %{WORD:log_level} \[%{WORD} ? %{POSINT:syslog_pid}\] \[%{DATA:filename}\:%{INT:line_number}\] \- %{GREEDYDATA:syslog_message}" }
    }
  } else if ("{{ COMMON_LOG_DIR }}/devpi/supervisor/supervisord.log" in [source] or 
    "{{ COMMON_LOG_DIR }}/devpi/supervisor/devpi-server-stderr.log" in [source] or 
    "{{ COMMON_LOG_DIR }}/supervisor/supervisord.log" in [source] or 
    "/edx/app/edxapp/edx-platform/logs/util1/supervisor/lms_high_mem_2-stderr.log" in [source] or
    "/edx/app/edxapp/edx-platform/logs/util1/supervisor/cms_default_4-stderr.log" in [source] or
    "/edx/app/edxapp/edx-platform/logs/util1/supervisor/lms_default_3-stderr.log" in [source] or
    "/edx/app/edxapp/edx-platform/logs/util1/supervisor/cms_high_1-stderr.log" in [source] or
    "/edx/app/edxapp/edx-platform/logs/util1/supervisor/lms_high_4-stderr.log" in [source] or
    "/edx/app/edxapp/edx-platform/logs/util1/supervisor/cms_low_3-stderr.log" in [source] or
    "/edx/app/edxapp/edx-platform/logs/util1/supervisor/lms_low_1-stderr.log" in [source]) {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:syslog_timestamp} %{WORD:log_level} %{GREEDYDATA:syslog_message}" }
      match => { "message" => "\[%{TIMESTAMP_ISO8601:syslog_timestamp}\: %{LOGLEVEL:log_level}\/%{USERNAME:supervisor_program}\] %{GREEDYDATA:syslog_message}" }
      tag_on_failure => []
    }
  } else if ("/edx/app/edxapp/edx-platform/logs/util1/supervisor/cms__high_mem_2-stdout.log" in [source] or
    "/edx/app/edxapp/edx-platform/logs/util1/supervisor/cms_default_4-stdout.log" in [source] or
    "/edx/app/edxapp/edx-platform/logs/util1/supervisor/lms_default_3-stdout.log" in [source] or
    "/edx/app/edxapp/edx-platform/logs/util1/supervisor/cms_high_1-stdout.log" in [source] or
    "/edx/app/edxapp/edx-platform/logs/util1/supervisor/lms_high_4-stdout.log" in [source] or
    "/edx/app/edxapp/edx-platform/logs/util1/supervisor/cms_low_3-stdout.log" in [source] or
    "/edx/app/edxapp/edx-platform/logs/util1/supervisor/lms_low_1-stdout.log" in [source] or
    "/edx/app/edxapp/edx-platform/logs/util1/supervisor/notifier-celery-workers-stdout.log" in [source] or
    "/edx/app/edxapp/edx-platform/logs/util1/supervisor/notifier-scheduler-stdout.log" in [source]) {
    grok {
      match => { "message" => "%{GREEDYDATA:syslog_message}" }
    }
  } else if ("/edx/app/edxapp/edx-platform/logs/util1/supervisor/notifier-celery-workers-stderr.log" in [source] or
    "/edx/app/edxapp/edx-platform/logs/util1/supervisor/notifier-scheduler-stderr.log" in [source]) {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:syslog_timestamp} \[%{LOGLEVEL:log_level}\] \[%{USERNAME}\=%{USERNAME:supervisor_program}\] %{GREEDYDATA:syslog_message}" }
    }
  } else if ("/edx/app/edxapp/edx-platform/logs/util1/supervisor/supervisord.log" in [source] or 
    "/edx/app/edxapp/edx-platform/logs/app1/supervisor/supervisord.log" in [source]) {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:syslog_timestamp} %{LOGLEVEL:log_level} %{WORD:supervisor_result}\: %{GREEDYDATA:syslog_message}" }
    }
  } else if ("/edx/app/edxapp/edx-platform/logs/util1/supervisor/xqueue-stderr.log" in [source]) {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:syslog_timestamp} \[%{POSINT:syslog_pid}\] \[%{LOGLEVEL:log_level}\] %{GREEDYDATA:syslog_message}" }
    }
  } else if ("/edx/app/edxapp/edx-platform/logs/util1/supervisor/xqueue-stdout.log" in [source] or 
    "/edx/app/edxapp/edx-platform/logs/util1/supervisor/xqueue_consumer-stdout.log" in [source] or
    "/edx/app/edxapp/edx-platform/logs/util1/supervisor/certs-stdout.log" in [source] or 
    "/edx/app/edxapp/edx-platform/logs/app1/supervisor/cms-stdout.log" in [source] or
    "/edx/app/edxapp/edx-platform/logs/app1/supervisor/lms-stdout.log" in [source] or
    "/edx/app/edxapp/edx-platform/logs/app1/supervisor/cms-stderr.log" in [source] or
    "/edx/app/edxapp/edx-platform/logs/app1/supervisor/lms-stderr.log" in [source]) {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:syslog_timestamp} %{LOGLEVEL:log_level} %{POSINT:syslog_pid} \[%{DATA:queue_service}\] %{DATA:filename}\:%{INT:line_number} \- %{GREEDYDATA:syslog_message}" }
    }
  } else if ("/edx/app/edxapp/edx-platform/logs/util1/supervisor/xqueue_consumer-stderr.log" in [source] or
    "/edx/app/edxapp/edx-platform/logs/util1/supervisor/certs-stderr.log" in [source]) {
    grok {
      match => { "message" => "%{GREEDYDATA:syslog_message}" }
    }
  } else if ("{{ COMMON_LOG_DIR }}/devpi/supervisor/supervisord.log" in [source]) {
    grok {
      match => { "message" => "%{GREEDYDATA:syslog_message}" }
    }
  } else if ("{{ COMMON_LOG_DIR }}/rabbitmq/edx.cms.core.default.log" in [source]) {
    grok {
      match => { "message" => "%{WORD}\=%{QUOTEDSTRING:syslog_timestamp} %{WORD}\=%{QUOTEDSTRING:rabbitmq_vhost} %{WORD}\=%{QUOTEDSTRING:rabbitmq_queue} %{WORD}\=%{INT:rabbitmq_length}" }
    }
  } else if ("{{ COMMON_LOG_DIR }}/mongo/mongodb.log" in [source]) {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:syslog_timestamp} ?\[?%{DATA:mongo_context}?\]? %{GREEDYDATA:syslog_message}" }
    } 
  } else if ("{{ COMMON_LOG_DIR }}/tracking/tracking.log" in [source] or 
    "/edx/app/edxapp/edx-platform/logs/app1/tracking/tracking.log" in [source]) {
    grok {
      match => { "message" => "%{GREEDYDATA:syslog_message}" }
    }
  } else if ("{{ logstash_log_dir }}/logstash.log" in [source]) {
    grok {
      match => { "message" => "\{\:%{WORD}\=\>\"%{TIMESTAMP_ISO8601:syslog_timestamp}\"\, %{GREEDYDATA:syslog_message}\}" }
    }
  } else if ("{{ elasticsearch_log_dir }}/elasticsearch.log" in [source]) {
    grok {
      match => { "message" => "(?:\[%{TIMESTAMP_ISO8601:syslog_timestamp}\]\[%{WORD:log_level}? \])%{GREEDYDATA:syslog_message}" }
    }
  } else { #matches all rsyslog messages
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{WORD:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{WORD:syslog_hostname} \[%{WORD}\=%{DATA:service_variant}\]\[%{DATA:service_program}\]\[%{WORD}\:%{USERNAME:env}\] %{WORD:log_level} \[%{WORD} ? %{POSINT:syslog_pid}\] \[%{DATA:filename}\:%{INT:line_number}\] \- %{GREEDYDATA:syslog_message}" }
      tag_on_failure => []
    }
  }
  }
  syslog_pri { }
  date {
    match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "DD MMM YYYY:HH:mm:ss ZZZ", "ISO8601"]
  }
  # Try and parse the tracking log json
  # 142 is syslog facility 17 (local1) and Informational.
  # This is used to reduce the number of errors in json parsing as
  # tracking uses that facility and priority by default.
  if "142" in [syslog_pri] {
    json {
      source => "syslog_message"
      target => "tracking"
    }
  }
#  if ([message] =~ /(?i)warn/) {
#    mutate {
#      add_tag => "warning"
#    }
#  }
#  if ([message] =~ /(?i)error/) {
#    mutate {
#      add_tag => " error"
#    }
#  }
  if ([message] =~ /(?i)forums/) {
    mutate {
      add_tag => "forums"
    }
  }
  if ([message] =~ /(?i)certs/) {
    mutate {
      add_tag => "certs"
    }
  }
  if ("cms" in [service_variant]) {
    mutate {
      add_tag => "cms"
    }
  }
  if ("lms" in [service_variant]) {
    mutate {
      add_tag => "lms"
    }
  }
  if !("_grokparsefailure" in [tags]) {
    mutate {
      replace => [ "@source_host", "%{host}" ]
    }
    mutate {
      remove_field => [ "syslog_hostname", "syslog_timestamp" ]
      remove_tag => [ "beats_input_codec_plain_applied" ]
    }
  }
}

output {
  # Example just to output to elasticsearch
  elasticsearch { }
  # And gzip for each host and program
  file {
       path => '{{ logstash_data_dir }}/%{@source_host}/all.%{+yyyyMMdd}.gz'
       gzip => true
  }
  # Should add option for S3 as well.
}
