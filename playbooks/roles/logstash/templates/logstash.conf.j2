input {
  beats {
    port => {{ LOGSTASH_PORT }}
    type => beats
    congestion_threshold => 40
  }
}

filter {
  multiline {
    pattern => "(^(?![0-9]|[A-Z][a-z][a-z]\s|Traceback|\[[0-9]|date)|^([0-9][0-9]\s))"
    what => "previous"
    stream_identity => "%{source}"
  }
  if !([message] =~ /^(Traceback)/ ) {

  if ("nginx_access" in [openedx_log_format]) {
    grok {
      match => { "message" => "%{IP:ip_addr} \- \- \[%{MONTHDAY}\/%{MONTH}\/%{YEAR}\:%{HOUR}\:%{MINUTE}\:%{SECOND} %{ISO8601_TIMEZONE}\] %{QUOTEDSTRING:nginx_request} %{INT:nginx_status_code} %{INT:nginx_payload_size} %{QUOTEDSTRING:nginx_external_url}%{GREEDYDATA:nginx_user_agent}" }
      match => { "message" => "%{IP:ip_addr} \- \- \[%{MONTHDAY}\/%{MONTH}\/%{YEAR}\:%{HOUR}:?%{MINUTE}\:%{SECOND} %{ISO8601_TIMEZONE}\] %{QUOTEDSTRING:nginx_request} %{INT:nginx_status_code} %{INT:nginx_payload_size} \"\-\" %{QUOTEDSTRING:nginx_external_url}" }
      match => { "message" => "\- \- %{IP:ip_addr} \- \- \[%{MONTHDAY}\/%{MONTH}\/%{YEAR}\:%{HOUR}:?%{MINUTE}\:%{SECOND} %{ISO8601_TIMEZONE}\] ? %{QUOTEDSTRING:nginx_request} %{INT:nginx_status_code} %{INT:nginx_payload_size} %{DATA:nginx_payload_size} \"\-\" %{QUOTEDSTRING:nginx_external_url}" }
      tag_on_failure => []
    }
  } else if ("nginx_access" in [openedx_log_format]) {
    grok {
      match => { "message" => "%{YEAR}/%{MONTHNUM}/%{MONTHDAY} %{HOUR}\:%{MINUTE}\:%{SECOND} \[%{WORD:log_level}\] %{GREEDYDATA:syslog_message}" }
    }
  } else if ("openedx_standard" in [openedx_log_format]) {
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{WORD:syslog_hostname} \[%{WORD}\=%{DATA:service_variant}\]\[%{DATA:service_program}\]\[%{WORD}\:%{USERNAME:env}\] %{WORD:log_level} \[%{WORD} ? %{POSINT:syslog_pid}\] \[%{DATA:filename}\:%{INT:line_number}\] \- %{GREEDYDATA:syslog_message}" }
    }
  } else if ("supervisor_error" in [openedx_log_format] and "notifier" in [extra_check]) {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:syslog_timestamp} \[%{LOGLEVEL:log_level}\] \[%{USERNAME}\=%{USERNAME:supervisor_program}\] %{GREEDYDATA:syslog_message}" }
    }
  } else if ("supervisor_error" in [openedx_log_format]) {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:syslog_timestamp} %{WORD:log_level} %{GREEDYDATA:syslog_message}" }
      match => { "message" => "\[%{TIMESTAMP_ISO8601:syslog_timestamp}\: %{LOGLEVEL:log_level}\/%{USERNAME:supervisor_program}\] %{GREEDYDATA:syslog_message}" }
      tag_on_failure => []
    }
  } else if ("supervisor_stdout" in [openedx_log_format]) { 
    grok {
      match => { "message" => "%{GREEDYDATA:syslog_message}" }
    }
  } else if ("supervisor_log" in [openedx_log_format]) {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:syslog_timestamp} %{LOGLEVEL:log_level} %{WORD:supervisor_result}\: %{GREEDYDATA:syslog_message}" }
    }
  } else if ("supervisor_error" in [openedx_log_format] and "xqueue" in [service_variant]) {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:syslog_timestamp} \[%{POSINT:syslog_pid}\] \[%{LOGLEVEL:log_level}\] %{GREEDYDATA:syslog_message}" }
    }
  } else if ("supervisor_stdout" in [openedx_log_format]) {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:syslog_timestamp} %{LOGLEVEL:log_level} %{POSINT:syslog_pid} \[%{DATA:queue_service}\] %{DATA:filename}\:%{INT:line_number} \- %{GREEDYDATA:syslog_message}" }
    }
  } else if ("rabbitmq" in [openedx_log_format]) {
    grok {
      match => { "message" => "%{WORD}\=%{QUOTEDSTRING:syslog_timestamp} %{WORD}\=%{QUOTEDSTRING:rabbitmq_vhost} %{WORD}\=%{QUOTEDSTRING:rabbitmq_queue} %{WORD}\=%{INT:rabbitmq_length}" }
    }
  } else if ("mongo" in [openedx_log_format]) {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:syslog_timestamp} ?\[?%{DATA:mongo_context}?\]? %{GREEDYDATA:syslog_message}" }
    } 
  } else if ("tracking" in [opendedx_log_format]) { 
    grok {
      match => { "message" => "%{GREEDYDATA:syslog_message}" }
    }
  } else if ("logstash" in [openedx_log_format]) {
    grok {
      match => { "message" => "\{\:%{WORD}\=\>\"%{TIMESTAMP_ISO8601:syslog_timestamp}\"\, %{GREEDYDATA:syslog_message}\}" }
    }
  } else if ("elasticsearch" in [openedx_log_format]) {
    grok {
      match => { "message" => "(?:\[%{TIMESTAMP_ISO8601:syslog_timestamp}\]\[%{WORD:log_level}? \])%{GREEDYDATA:syslog_message}" }
    }
  } else if ("rsyslog" in [openedx_log_format]) {
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{WORD:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{WORD:syslog_hostname} \[%{WORD}\=%{DATA:service_variant}\]\[%{DATA:service_program}\]\[%{WORD}\:%{USERNAME:env}\] %{WORD:log_level} \[%{WORD} ? %{POSINT:syslog_pid}\] \[%{DATA:filename}\:%{INT:line_number}\] \- %{GREEDYDATA:syslog_message}" }
      tag_on_failure => []
    }
  }
  }
  syslog_pri { }
  date {
    match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "DD MMM YYYY:HH:mm:ss ZZZ", "ISO8601"]
  }
  # Try and parse the tracking log json
  # 142 is syslog facility 17 (local1) and Informational.
  # This is used to reduce the number of errors in json parsing as
  # tracking uses that facility and priority by default.
  if "142" in [syslog_pri] {
    json {
      source => "syslog_message"
      target => "tracking"
    }
  }
  if ("" in [openedx_log_format]) {
    mutate {
      add_tag => "topbeat"
    }
  }
  if !("_grokparsefailure" in [tags]) {
    mutate {
      replace => [ "@source_host", "%{host}" ]
      replace => [ "@message", "%{syslog_message}" ]
    }
    mutate {
      remove_field => [ "syslog_hostname", "syslog_message", "syslog_timestamp" ]
      remove_tag => [ "beats_input_codec_plain_applied" ]
    }
  }
}

output {
  # Example just to output to elasticsearch
  elasticsearch { }
  # And gzip for each host and program
  file {
       path => '{{ logstash_data_dir }}/%{@source_host}/all.%{+yyyyMMdd}.gz'
       gzip => true
  }
  # Should add option for S3 as well.
}
